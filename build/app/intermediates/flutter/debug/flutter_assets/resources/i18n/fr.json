{
    "title": "Bonjour Le Monde",
    "menu.constants": "Constantes",
    "menu.controllers": "Controleurs",
    "menu.errors": "Erreurs",
    "menu.resources": "Ressources",
    "menu.routage": "Routage",
    "menu.services": "Services",
    "menu.screens": "Écrans",
    "menu.widgets": "Composants",
    "menu.scanner": "Lire le qr",
    "menu.badge.new": "neuf",
    "welcome.message": "Bienvenu Développeur ${username}",
    "welcome.message1": "Heureux que vous fassiez partie de la Communité",
    "welcome.message2": "Les nouvelles fonctionnalités sont disponibles sur la barre de menu",
    "eg": "Exemple:  \n",
    "karee.module.constant.title": "KAREE ET LES CONSTANTES ",
    "karee.module.constant.details": "Karee s'est doté de 3 nouvelles constantes très utiles",
    "karee.module.constant.errorScreenName.detail": "Cette constante vous aide à personnaliser votre écran d'erreurs dans votre application en mode production. Parfois, lorsque votre application est en cours d'exécution, une erreur non gérée peut se produire, pour éviter l'écran d'erreur par défaut de Flutter, Ceci est le moyen de le modifier. Il suffit de nommer un écran avec cette constante.",
    "karee.module.constant.profile.prod.detail": "Le profil de l'application est utilisé par Karee pour savoir si l'application fonctionne en mode dev ou en mode prod. Le mode production vous permet de fournir une page de contact à vos utilisateurs en cas de problème. L'écran d'erreur par défaut de Karee est ",
    "karee.module.constant.profile.dev.detail": "Lorsque le mode développeur est activé, les développeurs verront les exceptions déclenchées dans l'application sur une interface utilisateur. L'écran d'erreur par défaut de Karee ressemble à ceci:",
    "karee.module.controller.title": "KAREE ET LES CONTROLEURS ",
    "karee.module.controller.details": "L'injection de dépendances le concepts tant attendu dans l'univers Karee est maintenant disponible. Karee nous offre désormais une injection de dépendances à deux niveaux. Injection de services et injection de variables de configuration",
    "karee.module.controller.service.title": "Injection de service",
    "karee.module.controller.service.detail": "L'injection de service permet de procéder à une initialisation de vos services sans se soucier de problème majeur dans l'injection de dépendances tel que le cycle d'injection.",
    "karee.module.controller.variable.title": "Injection de configuration",
    "karee.module.controller.variable.detail": "L'injection de variable consiste à initialiser une propriété d'un service ou d'un contrôleur à partir d'une entrée du fichier de configuration.",
    "karee.module.resources.title": "KAREE ET LES RESSOURCES",
    "karee.module.resources.details": "Karee s'est nouvellement doté de nouvelles ressources, à savoir un fichier de configuration et des fichiers de traduction",
    "karee.module.resources.config.title": "Le fichier de configuration",
    "karee.module.resources.config.detail":"Le fichier de configuration permet de ranger toutes vos variables utiles à la configuration de votre application. Ainsi ces variables pourront être chargées grâce à l'injection de dépendances dans vos services ou dans vos contrôleurs.",
    "karee.module.resources.locale.title": "Les fichiers de traduction",
    "karee.module.resources.locale.detail":"Dans le but de faciliter l'internationalisation de votre application, Karee a mis à votre disposition la configuration la plus simpliste en 3 étapes.",
    "karee.module.resources.locale.step1": "Définir les langues supportées",
    "karee.module.resources.locale.step2": "Ajouter les fichiers de traductions",
    "karee.module.resources.locale.step3": "Utiliser les traductions",
    "karee.module.routage.title": "KAREE ET LE ROUTAGE",
    "karee.module.routage.details": "Les deux nouveaux concepts dont Karee s'est doté sont Le routage interne et les URLs paramétrées",
    "karee.module.routage.url.title": "Les URLs paramétrées",
    "karee.module.routage.url.detail":"Il est désormais possible de manipuler les urls paramétriques avec Karee, pour se faire, il suffira de mettre la variable entre des accolades {}.",
    "karee.module.routage.internal.title": "Le routage interne",
    "karee.module.routage.internal.detail":"Ce mode de routage tant attendu, naît d'un besoin réel lors du développement des applications. L'idée est de pouvoir charger dynamiquement des composants dans une zone selon le concept de navigation sans toute fois altérer la navigation. Pour se faire, il faut suivre deux étapes simples.",
    "karee.module.routage.internal.step1": "Définir le routeur",
    "karee.module.routage.internal.step2": "Procéder au routage",
    "karee.module.screen.title": "KAREE ET LES ÉCRANS",
    "karee.module.screen.details": "Au plus haut niveau dans l'affichage d'une page, le composant principale doit être un descendant d'un PAGE KAREE. Celles-ci sont de deux types, les StatelessScreen et les StatefulScreen",
    "karee.module.screen.stls.title": "Les StatelessScreen",
    "karee.module.screen.stls.detail":"La class StatelessScreen est une classe descendante de StatelessWidget, et offrant une portée globale au CONTEXT (context), au MEDIA_QUERY sans employer le context (mediaQuery) et aux dimensions de l'écran (screenSize)",
    "karee.module.screen.stfs.title": "Les StatefulScreen",
    "karee.module.screen.stfs.detail":"Ce type d'écran hérite des StatefulWidget et a les mêmes propriétes que les StatelessScreen.",
    "karee.module.service.title": "KAREE ET LES SERVICES ",
    "karee.module.service.details": "Les services dans Karee, un nouveau concept qui désigne une classe contenant de la logique métier, et ayant la propriété d'être injectable et dans la quelle on peut injecter d'autres services ou propriétés sans se soucier du cycle de dépendance. Les services sont utilisés pour fournir des données aux controllers ou à d'autres services."
}